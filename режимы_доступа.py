# -*- coding: utf-8 -*-
"""Режимы_доступа.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12zn4SETKzkGSSiJdKC0svjBkgkAJm-xv
"""

class Point:
  def __init__(self,x=0,y=0):
    self.x = x
    self.y = y

pt = Point(1,2)
pt.x = 200
pt.y = 'coord_y'
print(pt.x,pt.y)

"""Делаем ограничение


*   _attribute - protected режим (внутри класса + во всех его дочерних классах)
*   __attribute - private (обращение только внутри класса)


"""

class Point:
  def __init__(self,x=0,y=0):
    self._x = x #внутренние переменные
    self._y = y

pt = Point(1,2)
#pt.x = 200
#pt.y = 'coord_y'
print(pt._x,pt._y)

class Point:
  def __init__(self,x=0,y=0):
    self.__x = x #не можем обратиться
    self.__y = y

  def set_coord(self,x,y):
    #сеттеры и геттеры -> для согласованности объектов
    if type(x) in (int,float) and type(y) in (int,float):
      self.__x = x #не можем обратиться
      self.__y = y
    else:
      raise ValueError("Координаты должны быть числами")

  def get_coord(self):
    return self.__x, self.__y


pt = Point(1, 2)
pt.set_coord(10, 20)
print(pt.get_coord())

"""#`classmethod` позволяет создавать методы, которые работают с классом в целом, а не с его конкретными экземплярами."""

!pip install accessify

from accessify import private,protected
# если есть необходимость обратиться к защищенным методам -> accessify
class Point:
  def __init__(self,x=0,y=0):
    self.__x = self.__y = 0
    if self.check_value(x) and self.check_value(y):
      self.__x = x #не можем обратиться
      self.__y = y

  @private
  @classmethod
  def check_value(cls,x):
    return type(x) in (int,float)

  def set_coord(self,x,y):
    #сеттеры и геттеры -> для согласованности объектов
    if self.check_value(x) and self.check_value(y):
      self.__x = x #не можем обратиться
      self.__y = y
    else:
      raise ValueError("Координаты должны быть числами")

  def get_coord(self):
    return self.__x, self.__y


pt = Point(1, 2)
pt.set_coord(10, 20)
print(pt.get_coord())
#print (pt.__x) -> не можем вызвать
print(dir(pt))
#print((pt._Point__x))  -> но так лучше не делать

"""## **Property**

**property** используется для создания управляемых атрибутов — позволяет обращаться к методам как к обычным полям, чтобы автоматически вычислять, проверять или изменять данные при чтении или записи значения.
"""

class Person:
  def __init__(self,name,old):
    self.__name = name
    self.__old = old

  @property
  def old(self):
    return self.__old

  @old.setter
  def old(self,old):
    self.__old = old

  @old.deleter
  def old(self):
    del self.__old

  # берется в первую очередь

p = Person("Сергей",20)
del p.old
p.old = 5
print(p.__dict__)

"""## **Дескрипторы**"""

class Point3D:
  def __init__(self,x,y,z):
    self._x = x
    self._y = y
    self._z = z

  @classmethod
  def verify_coord(cls,coord):
    if type(coord) != int:
      raise TypeError("Координата должна быть целым числом")

  @property
  def x(self):
    return self._x

  @x.setter
  def x(self,coord):
    self.verify_coord(coord)
    self._x = coord

  @property
  def y(self):
    return self._y

  @y.setter
  def y(self,coord):
    self.verify_coord(coord)
    self._y = coord

  @property
  def z(self):
    return self._z

  @y.setter
  def z(self,coord):
    self.verify_coord(coord)
    self._z = coord

pt = Point3D(1,2,3)
print(pt.__dict__)

#-> как можно оптимизировать? -> на помощь приходят дискрипторы

#get - > дескриптор non_data
#get,set,delete -> дескриптор data
# создаем класс -> создаем экземпляр класса -> вызываем и присваиваем все имена
class Integer:
  def __set_name__(self,owner,name):
    self.name = "_"+name
  def __get__(self,instance,owner):
    return getattr(instance, self.name)
  def _set__(self,instance,value):
    self.verify_coord(value)
    setattr(instance, self.name,value)

class Point3D:
  x = Integer()
  y = Integer()
  z = Integer()

  def __init__(self,x,y,z):
    self.x = x
    self.y = y
    self.z = z

  @classmethod
  def verify_coord(cls,coord):
    if type(coord) != int:
      raise TypeError("Координата должна быть целым числом")

pt = Point3D(1,2,3)